#product.clearfix.= product.handle - if product.images.size == 1  one_image
 .product_body.clearfix
   .images
     .featured
       .image
          %a#placeholder.cloud-zoom{href: product.featured_image.thumb, rel: "position: 'inside', showTitle: 'false'"}
            %img{src: product.featured_image.thumb, alt: product.featured_image.alt | escape}

      - if product.images.size  1 
       .thumbs.clearfix
          - for image in product.images 
           .image
              %a.cloud-zoom-gallery{href: image.src | product_img_url: 'original', rel: "useZoom: 'placeholder', smallImage: '= image.src | #{product_img_url}: 'grande' ', tint: '#ffffff'"}
                %img{src: image.src | product_img_url: 'small', alt: image.alt | escape}

   .content
      - if collection 
       .more-info.clearfix
          - if collection.previous_product 
           .fl
              %a.previous_product{href: collection.previous_product}
                %span.upper Previous
                %span.lower Product
          - if collection.next_product 
           .fr
              %a.next_product{href: collection.next_product}
                %span.upper Next
                %span.lower Product

      %h2.title= product.title
      
      - if settings.product_description_position == "top" 
       .description= product.description 
       .details
        %span.type
          type:
          = product.type | link_to_type
        %span.vendor vendor:= product.vendor | link_to_vendor
      
      %form#add-item-form.variants.clearfix{action:"/cart/add", method: "post"}
        - if product.options.size  1 
         .select.clearfix
            %select#product-select{name:'id'}
              - for variant in product.variants 
                %option{value: variant.id}
                  = variant.title
                  = money variant.price
        - elsif product.options.size == 1 && product.variants.size  1
         .select.clearfix
            %label= product.options[0]
            %select#product-select{name: 'id'}
              - for variant in product.variants 
                %option{value: variant.id}
                  = variant.title
                  = money variant.price
        - else 
          %input{type: "hidden", name: "id", value: product.variants.first.id}
        
        - if product.price_min % product.compare_at_price_min 
          %p#price-preview.price= money product.price_min
            %span
            was
            = product.compare_at_price_min | money
        - else 
          %p#price-preview.price= money product.price_min
        
        - if product.available         
         .purchase.clearfix
            %span
              %input#add-to-cart.cart.cufon{type: "submit", name: "add", value: "Add to Cart"}
        - else 
         .purchase.clearfix
            %span
              %input#add-to-cart.cart.cufon.disabled{type: "submit", name: "add", value: "Sold Out", disabled: "disabled"}
      
      - if settings.product_description_position == "bottom" 
       .description= product.description 
       .details
        %span.type
          type:
          = product.type | link_to_type
        %span.vendor
          by:
          = product.vendor | link_to_vendor

  - if collection && collection.products.size  1 
  
   .more-info"
      %span.upper More Products
      %span.lower From This Collection
  
   .slider-container
      #content-scroll.scroll
        #content-slide
          - for product in collection.products 
            - render partial: 'shared/product-slide-small'

     .slider
        %span.ui-slider-handle &nbsp;

  #recently-viewed{style: "display:none;"}
   .more-info
      %span.upper Recently
      %span.lower Viewed Items

    #content-table.products.clearfix

<script type="text/javascript">

// <![CDATA[  
var selectCallback = function(variant, selector) {
  if (variant && variant.available == true) {
    // selected a valid variant
    jQuery('#add-to-cart').removeClass('disabled').removeAttr('disabled').val('Add to Cart'); // remove unavailable class from add-to-cart button, and re-enable button
    if(variant.price < variant.compare_at_price){
      jQuery('#price-preview').html(Shopify.formatMoney(variant.price, "{{shop.money_format}}") + " <span>was " + Shopify.formatMoney(variant.compare_at_price, "{{shop.money_format}}") + "</span>");
    } else {
      jQuery('#price-preview').html(Shopify.formatMoney(variant.price, "{{shop.money_format}}"));
    }

  } else {
    // variant doesn't exist
    var message = variant ? "Sold Out" : "Unavailable";    
    jQuery('#add-to-cart').addClass('disabled').attr('disabled', 'disabled').val('Sold Out');      // set add-to-cart button to unavailable class and disable button
    jQuery('#product .variants .price').text(message); // update price-field message
  }
};

function remove(s, t) {
  /*
  **  Remove all occurrences of a token in a string
  **    s  string to be processed
  **    t  token to be removed
  **  returns new string
  */
  i = s.indexOf(t);
  r = "";
  if (i == -1) return s;
  r += s.substring(0,i) + remove(s.substring(i + t.length), t);
  return r;
}

// initialize multi selector for product
jQuery(function() {
  if (jQuery.cookie("viewed-products") != null){ // if cookie exists...
    var products = jQuery.cookie("viewed-products");
    var productHandles = products.split(" ");
    var matches = 0;
    var limit = 3;
    for (var i = (productHandles.length - 1); i >= 0; i--) {
      if(productHandles[i] != "{{ product.handle }}" && productHandles[i] != "" && (matches < limit)){
        Shopify.getProduct(productHandles[i]);
        matches++;
      }
    }

    if (products.indexOf("{{ product.handle }}") == -1){ // add current product to list if it isn't already there
      products += " {{ product.handle }}";
      jQuery.cookie("viewed-products", products, {path: "/"});
    } else { // if it is already there, push it to the end of the string
      var newstring = remove(products, '{{ product.handle }}');
      newstring += " {{ product.handle }}";
      jQuery.cookie("viewed-products", newstring.replace(/ /g,' '), {path: "/"});
    }
  } else { // create cookie if it doesn't already exist
    jQuery.cookie("viewed-products", "{{ product.handle }}", {path: "/"});
  }

  {% if product.variants.size > 1 or product.options.size > 1 %}
    new Shopify.OptionSelectors("product-select", { product: {{ product | json }}, onVariantSelected: selectCallback });

      {% assign found_one_in_stock = false %}
      {% for variant in product.variants %}
        {% if variant.available and found_one_in_stock == false %}
          {% assign found_one_in_stock = true %}
          {% for option in product.options %}
            jQuery('#product-select-option-' + {{ forloop.index0 }}).val({{ variant.options[forloop.index0] | json }}).trigger('change');
          {% endfor %}
        {% endif %}
      {% endfor %}
  {% endif %}
});
// ]]>
</script>
